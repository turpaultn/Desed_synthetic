# -*- coding: utf-8 -*-
#########################################################################
# Initial software
# Copyright Nicolas Turpault, Romain Serizel, Justin Salamon, Ankit Parag Shah, 2019, v1.0
# This software is distributed under the terms of the License MIT
#########################################################################
import time
import argparse
import scaper
import numpy as np
import os
import os.path as osp
import json
import glob
import jams

from utils import choose_class, add_event, create_folder, pprint, rm_high_polyphony, post_processing_annotations


def modify_bg_snr(new_snr, jam_file):
    """ Modify the background SNR of a JAMS generated by scaper
    Args:
        new_snr: float, Sound to noise ratio (SNR) of the background from the reference
        jam_file: str, the name of the JAMS file to change the background SNR

    Returns:
        jams object that has been modified
    """
    jam_obj = jams.load(jam_file)
    data = jam_obj["annotations"][0].data
    for cnt, obs in enumerate(data):
        if obs.value["role"] == "background":
            # Changing manually the jams to have the snr desired
            jam_obj["annotations"][0].data[cnt].value["snr"] = new_snr

    return jam_obj


def generate_new_bg_snr_files(new_snr, in_dir, out_dir):
    """ Generate the new JAMS and audio files with a different background SNR
    Args:
        new_snr: float, Sound to noise ratio (SNR) of the background from the reference
        in_dir: str, folder containing JAMS file with background SNR to be changed
        out_dir: str, folder where to save the new audio and JAMS

    Returns:

    """
    for jam_file in sorted(glob.glob(os.path.join(in_dir, "*.jams"))):
        jams_obj = modify_bg_snr(new_snr, jam_file)
        out_jams = osp.join(out_dir, os.path.basename(jam_file))
        jams_obj.save(out_jams)

        audiofile = os.path.join(out_dir, osp.splitext(osp.basename(jam_file))[0] + ".wav")
        print(audiofile)
        scaper.generate_from_jams(out_jams, audiofile)


if __name__ == '__main__':
    t = time.time()
    parser = argparse.ArgumentParser()
    parser.add_argument('--outfolder', type=str, default=osp.join('..', 'eval', 'soundscapes_generated_fbsnr'))
    parser.add_argument('--outcsv', type=str, default=osp.join('..', 'eval', "soundscapes_generated_fbsnr", "XdB.csv"))
    parser.add_argument('--number', type=int, default=1000)
    parser.add_argument('--fgfolder', type=str, default=osp.join("..", "eval", "soundbank", "foreground"))
    parser.add_argument('--bgfolder', type=str, default=osp.join("..", "eval", "soundbank", "background"))
    args = parser.parse_args()
    pprint(vars(args))

    # General output folder, in args
    out_folder = args.outfolder
    create_folder(out_folder)

    # SCAPER SETTINGS
    fg_folder = args.fgfolder
    bg_folder = args.bgfolder
    # JSON file
    param_file = 'event_occurences_eval.json'

    # Default parameters
    n_soundscapes = args.number
    ref_db = -50
    duration = 10.0

    with open(param_file) as json_file:
        params = json.load(json_file)

    # ########
    # FBSNR
    # #######
    # Generate events same way as the training set
    out_folder_30 = osp.join(out_folder, "30dB")
    create_folder(out_folder_30)
    n=0
    for class_lbl in params.keys():
        class_params = params[class_lbl]
        for i in range(int(n_soundscapes * class_params['prob'])):

            print('Generating soundscape: {:d}/{:d}'.format(n+1, n_soundscapes))

            # create a scaper
            sc = scaper.Scaper(duration, fg_folder, bg_folder)
            sc.protected_labels = []
            sc.ref_db = ref_db

            # add background
            sc.add_background(label=('choose', []),
                              source_file=('choose', []),
                              source_time=('const', 0))

            # add main event
            sc = add_event(sc, class_lbl, duration, fg_folder)

            # add random number of foreground events
            n_events = np.random.randint(0, class_params['event_max'])
            for _ in range(n_events):
                chosen_class = choose_class(class_params)
                sc = add_event(sc, chosen_class, duration, fg_folder)

            # generate
            audiofile = osp.join(out_folder_30, f"{n}.wav")
            jamsfile = osp.join(out_folder_30, f"{n}.jams")
            txtfile = osp.join(out_folder_30, f"{n}.txt")

            sc.generate(audiofile, jamsfile,
                        allow_repeated_label=True,
                        allow_repeated_source=True,
                        reverb=0.1,
                        disable_sox_warnings=True,
                        no_audio=False,
                        txt_path=txtfile)
            n += 1

    rm_high_polyphony(out_folder_30, 3)
    post_processing_annotations(out_folder_30, output_folder=out_folder_30, output_csv=args.outcsv)

    # We create the same dataset with different background SNR
    # Be careful, 6 means the background SNR is 6,
    # so the foreground background snr ratio is between 0dB and 24dB (see utils snr_min (6dB) and snr_max (30dB))
    out_folder_24 = osp.join(out_folder, "24dB")
    create_folder(out_folder_24)
    generate_new_bg_snr_files(6, out_folder_30, out_folder_24)

    # Same for 15
    out_folder_15 = osp.join(out_folder, "15dB")
    create_folder(out_folder_15)
    generate_new_bg_snr_files(15, out_folder_30, out_folder_15)

    out_folder_0 = osp.join(out_folder, "0dB")
    create_folder(out_folder_0)
    generate_new_bg_snr_files(30, out_folder_30, out_folder_0)
